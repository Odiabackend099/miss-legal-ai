/**
 * Lexi Voice AI - Main Application Component
 * Nigeria's Premier Voice AI Assistant
 */

import React, { useEffect, useState } from 'react';
import {
  StyleSheet,
  Text,
  View,
  StatusBar,
  Alert,
  Platform,
  PermissionsAndroid,
} from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';

// Services
import { VoiceService } from './src/services/VoiceService';
import { SupabaseService } from './src/services/SupabaseService';
import { PermissionService } from './src/services/PermissionService';

// Screens
import SplashScreen from './src/screens/SplashScreen';
import VoiceChatScreen from './src/screens/VoiceChatScreen';
import ConversationHistoryScreen from './src/screens/ConversationHistoryScreen';
import SettingsScreen from './src/screens/SettingsScreen';
import ProfileScreen from './src/screens/ProfileScreen';
import OnboardingScreen from './src/screens/OnboardingScreen';

// Types
import { RootStackParamList, TabParamList } from './src/types/navigation';
import { UserProfile } from './src/types/user';

const Stack = createStackNavigator<RootStackParamList>();
const Tab = createBottomTabNavigator<TabParamList>();

// Nigerian color scheme (Green and White from flag)\nconst COLORS = {\n  primary: '#008751', // Nigerian Green\n  secondary: '#FFFFFF', // White\n  accent: '#228B22', // Forest Green\n  background: '#F5F5F5',\n  text: '#333333',\n  textLight: '#666666',\n  error: '#FF4444',\n  success: '#00AA44',\n  warning: '#FFAA00',\n};\n\n// Tab Navigator Component\nfunction TabNavigator() {\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName: string;\n\n          switch (route.name) {\n            case 'VoiceChat':\n              iconName = focused ? 'microphone' : 'microphone-outline';\n              break;\n            case 'History':\n              iconName = focused ? 'history' : 'history';\n              break;\n            case 'Settings':\n              iconName = focused ? 'cog' : 'cog-outline';\n              break;\n            case 'Profile':\n              iconName = focused ? 'account' : 'account-outline';\n              break;\n            default:\n              iconName = 'help';\n          }\n\n          return <Icon name={iconName} size={size} color={color} />;\n        },\n        tabBarActiveTintColor: COLORS.primary,\n        tabBarInactiveTintColor: COLORS.textLight,\n        tabBarStyle: {\n          backgroundColor: COLORS.secondary,\n          borderTopColor: COLORS.primary,\n          borderTopWidth: 1,\n        },\n        headerStyle: {\n          backgroundColor: COLORS.primary,\n        },\n        headerTintColor: COLORS.secondary,\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      })}\n    >\n      <Tab.Screen \n        name=\"VoiceChat\" \n        component={VoiceChatScreen} \n        options={{ \n          title: 'Lexi Assistant',\n          tabBarLabel: 'Chat'\n        }} \n      />\n      <Tab.Screen \n        name=\"History\" \n        component={ConversationHistoryScreen} \n        options={{ \n          title: 'Conversation History',\n          tabBarLabel: 'History'\n        }} \n      />\n      <Tab.Screen \n        name=\"Settings\" \n        component={SettingsScreen} \n        options={{ \n          title: 'Settings',\n          tabBarLabel: 'Settings'\n        }} \n      />\n      <Tab.Screen \n        name=\"Profile\" \n        component={ProfileScreen} \n        options={{ \n          title: 'Profile',\n          tabBarLabel: 'Profile'\n        }} \n      />\n    </Tab.Navigator>\n  );\n}\n\n// Main App Component\nconst App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isFirstLaunch, setIsFirstLaunch] = useState(false);\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [permissionsGranted, setPermissionsGranted] = useState(false);\n\n  useEffect(() => {\n    initializeApp();\n  }, []);\n\n  const initializeApp = async () => {\n    try {\n      console.log('üöÄ Initializing Lexi Voice AI...');\n      \n      // Check if first launch\n      const isFirstTime = await checkFirstLaunch();\n      setIsFirstLaunch(isFirstTime);\n      \n      // Request permissions\n      const permissionsOk = await requestPermissions();\n      setPermissionsGranted(permissionsOk);\n      \n      if (!permissionsOk) {\n        Alert.alert(\n          'Permissions Required',\n          'Lexi needs microphone and storage permissions to work properly. Please enable them in settings.',\n          [{ text: 'OK' }]\n        );\n      }\n      \n      // Initialize services\n      await initializeServices();\n      \n      // Load user profile if exists\n      const profile = await loadUserProfile();\n      setUserProfile(profile);\n      \n      console.log('‚úÖ App initialization complete');\n    } catch (error) {\n      console.error('‚ùå App initialization failed:', error);\n      Alert.alert(\n        'Initialization Error',\n        'Failed to initialize the app. Please try restarting.',\n        [{ text: 'OK' }]\n      );\n    } finally {\n      // Minimum splash screen time for branding\n      setTimeout(() => {\n        setIsLoading(false);\n      }, 2000);\n    }\n  };\n\n  const checkFirstLaunch = async (): Promise<boolean> => {\n    try {\n      const AsyncStorage = (await import('@react-native-async-storage/async-storage')).default;\n      const hasLaunchedBefore = await AsyncStorage.getItem('hasLaunchedBefore');\n      \n      if (!hasLaunchedBefore) {\n        await AsyncStorage.setItem('hasLaunchedBefore', 'true');\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Error checking first launch:', error);\n      return false;\n    }\n  };\n\n  const requestPermissions = async (): Promise<boolean> => {\n    try {\n      if (Platform.OS === 'android') {\n        const permissions = [\n          PermissionsAndroid.PERMISSIONS.RECORD_AUDIO,\n          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,\n          PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,\n        ];\n        \n        const granted = await PermissionsAndroid.requestMultiple(permissions);\n        \n        return Object.values(granted).every(\n          permission => permission === PermissionsAndroid.RESULTS.GRANTED\n        );\n      }\n      \n      // iOS permissions are handled automatically by React Native Voice\n      return true;\n    } catch (error) {\n      console.error('Error requesting permissions:', error);\n      return false;\n    }\n  };\n\n  const initializeServices = async (): Promise<void> => {\n    try {\n      // Initialize Supabase\n      await SupabaseService.initialize();\n      console.log('‚úÖ Supabase service initialized');\n      \n      // Initialize Voice Service\n      await VoiceService.initialize();\n      console.log('‚úÖ Voice service initialized');\n      \n      // Initialize Permission Service\n      await PermissionService.initialize();\n      console.log('‚úÖ Permission service initialized');\n      \n    } catch (error) {\n      console.error('‚ùå Service initialization failed:', error);\n      throw error;\n    }\n  };\n\n  const loadUserProfile = async (): Promise<UserProfile | null> => {\n    try {\n      const profile = await SupabaseService.getCurrentUserProfile();\n      return profile;\n    } catch (error) {\n      console.error('Error loading user profile:', error);\n      return null;\n    }\n  };\n\n  // Render splash screen during initialization\n  if (isLoading) {\n    return <SplashScreen />;\n  }\n\n  // Render onboarding for first-time users\n  if (isFirstLaunch && !userProfile) {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"Onboarding\" component={OnboardingScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    );\n  }\n\n  // Main app navigation\n  return (\n    <NavigationContainer>\n      <StatusBar \n        barStyle=\"light-content\" \n        backgroundColor={COLORS.primary} \n      />\n      <Stack.Navigator \n        screenOptions={{ \n          headerShown: false,\n          gestureEnabled: true,\n        }}\n      >\n        <Stack.Screen name=\"Main\" component={TabNavigator} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.background,\n  },\n});\n\nexport default App;\nexport { COLORS };"
