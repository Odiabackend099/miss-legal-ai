/**\n * SupabaseService - Database and authentication service\n * Handles user profiles, conversation history, and data persistence\n */\n\nimport { createClient, SupabaseClient, User, Session } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { UserProfile, ConversationHistory, VoiceMessage } from '../types/user';\n\n// Supabase configuration\nconst SUPABASE_URL = 'https://your-project.supabase.co'; // Replace with actual URL\nconst SUPABASE_ANON_KEY = 'your-anon-key'; // Replace with actual key\n\ninterface SupabaseConfig {\n  url: string;\n  anonKey: string;\n  options?: {\n    auth?: {\n      storage?: any;\n      autoRefreshToken?: boolean;\n      persistSession?: boolean;\n      detectSessionInUrl?: boolean;\n    };\n  };\n}\n\nclass SupabaseServiceClass {\n  private client: SupabaseClient | null = null;\n  private currentUser: User | null = null;\n  private currentSession: Session | null = null;\n  private isInitialized: boolean = false;\n\n  /**\n   * Initialize Supabase client\n   */\n  async initialize(): Promise<void> {\n    try {\n      console.log('üîó Initializing Supabase service...');\n      \n      const config: SupabaseConfig = {\n        url: SUPABASE_URL,\n        anonKey: SUPABASE_ANON_KEY,\n        options: {\n          auth: {\n            storage: AsyncStorage,\n            autoRefreshToken: true,\n            persistSession: true,\n            detectSessionInUrl: false,\n          },\n        },\n      };\n      \n      this.client = createClient(config.url, config.anonKey, config.options);\n      \n      // Listen for auth changes\n      this.client.auth.onAuthStateChange((event, session) => {\n        console.log('üîê Auth state changed:', event);\n        this.currentSession = session;\n        this.currentUser = session?.user || null;\n        \n        if (event === 'SIGNED_IN') {\n          this.onUserSignedIn(session!.user);\n        } else if (event === 'SIGNED_OUT') {\n          this.onUserSignedOut();\n        }\n      });\n      \n      // Check for existing session\n      const { data: { session } } = await this.client.auth.getSession();\n      if (session) {\n        this.currentSession = session;\n        this.currentUser = session.user;\n        console.log('‚úÖ Existing session found');\n      }\n      \n      this.isInitialized = true;\n      console.log('‚úÖ Supabase service initialized successfully');\n      \n    } catch (error) {\n      console.error('‚ùå Supabase service initialization failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create anonymous user for immediate app usage\n   */\n  async createAnonymousUser(): Promise<UserProfile> {\n    try {\n      if (!this.client) {\n        throw new Error('Supabase client not initialized');\n      }\n      \n      console.log('üë§ Creating anonymous user...');\n      \n      // Generate anonymous user ID\n      const anonymousId = `anon_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      // Create anonymous profile\n      const anonymousProfile: UserProfile = {\n        id: anonymousId,\n        email: null,\n        phone: null,\n        name: 'Anonymous User',\n        preferredLanguage: 'english',\n        isAnonymous: true,\n        createdAt: new Date().toISOString(),\n        lastActiveAt: new Date().toISOString(),\n        settings: {\n          voiceSpeed: 1.0,\n          autoPlay: true,\n          saveHistory: true,\n          offlineMode: true,\n          dataUsageOptimization: true,\n        },\n        usage: {\n          totalConversations: 0,\n          totalVoiceMessages: 0,\n          totalMinutesUsed: 0,\n          planType: 'free',\n          remainingCredits: 10, // Free tier credits\n        },\n      };\n      \n      // Save to local storage\n      await AsyncStorage.setItem('userProfile', JSON.stringify(anonymousProfile));\n      \n      console.log('‚úÖ Anonymous user created:', anonymousId);\n      return anonymousProfile;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to create anonymous user:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sign up new user\n   */\n  async signUp(email: string, password: string, additionalData?: Partial<UserProfile>): Promise<UserProfile> {\n    try {\n      if (!this.client) {\n        throw new Error('Supabase client not initialized');\n      }\n      \n      console.log('üìù Signing up new user:', email);\n      \n      const { data, error } = await this.client.auth.signUp({\n        email,\n        password,\n        options: {\n          data: additionalData,\n        },\n      });\n      \n      if (error) {\n        throw error;\n      }\n      \n      if (!data.user) {\n        throw new Error('User creation failed');\n      }\n      \n      // Create user profile\n      const userProfile = await this.createUserProfile(data.user, additionalData);\n      \n      console.log('‚úÖ User signed up successfully:', userProfile.id);\n      return userProfile;\n      \n    } catch (error) {\n      console.error('‚ùå Sign up failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sign in existing user\n   */\n  async signIn(email: string, password: string): Promise<UserProfile> {\n    try {\n      if (!this.client) {\n        throw new Error('Supabase client not initialized');\n      }\n      \n      console.log('üîê Signing in user:', email);\n      \n      const { data, error } = await this.client.auth.signInWithPassword({\n        email,\n        password,\n      });\n      \n      if (error) {\n        throw error;\n      }\n      \n      if (!data.user) {\n        throw new Error('Sign in failed');\n      }\n      \n      // Get user profile\n      const userProfile = await this.getUserProfile(data.user.id);\n      \n      if (!userProfile) {\n        throw new Error('User profile not found');\n      }\n      \n      console.log('‚úÖ User signed in successfully:', userProfile.id);\n      return userProfile;\n      \n    } catch (error) {\n      console.error('‚ùå Sign in failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sign out current user\n   */\n  async signOut(): Promise<void> {\n    try {\n      if (!this.client) {\n        throw new Error('Supabase client not initialized');\n      }\n      \n      console.log('üö™ Signing out user...');\n      \n      const { error } = await this.client.auth.signOut();\n      \n      if (error) {\n        throw error;\n      }\n      \n      // Clear local user data\n      await AsyncStorage.removeItem('userProfile');\n      \n      console.log('‚úÖ User signed out successfully');\n      \n    } catch (error) {\n      console.error('‚ùå Sign out failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get current user profile\n   */\n  async getCurrentUserProfile(): Promise<UserProfile | null> {\n    try {\n      // First try to get from local storage (for anonymous users)\n      const localProfile = await AsyncStorage.getItem('userProfile');\n      if (localProfile) {\n        const profile = JSON.parse(localProfile) as UserProfile;\n        if (profile.isAnonymous) {\n          return profile;\n        }\n      }\n      \n      // For authenticated users, get from database\n      if (this.currentUser) {\n        return await this.getUserProfile(this.currentUser.id);\n      }\n      \n      return null;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get current user profile:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Update user profile\n   */\n  async updateUserProfile(updates: Partial<UserProfile>): Promise<UserProfile> {\n    try {\n      if (!this.client) {\n        throw new Error('Supabase client not initialized');\n      }\n      \n      const currentProfile = await this.getCurrentUserProfile();\n      if (!currentProfile) {\n        throw new Error('No current user profile');\n      }\n      \n      console.log('üìù Updating user profile:', currentProfile.id);\n      \n      const updatedProfile = {\n        ...currentProfile,\n        ...updates,\n        lastActiveAt: new Date().toISOString(),\n      };\n      \n      if (currentProfile.isAnonymous) {\n        // Update local storage for anonymous users\n        await AsyncStorage.setItem('userProfile', JSON.stringify(updatedProfile));\n      } else {\n        // Update database for authenticated users\n        const { error } = await this.client\n          .from('user_profiles')\n          .update(updatedProfile)\n          .eq('id', currentProfile.id);\n        \n        if (error) {\n          throw error;\n        }\n      }\n      \n      console.log('‚úÖ User profile updated successfully');\n      return updatedProfile;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to update user profile:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Save conversation history\n   */\n  async saveConversation(conversation: Omit<ConversationHistory, 'id'>): Promise<ConversationHistory> {\n    try {\n      if (!this.client) {\n        throw new Error('Supabase client not initialized');\n      }\n      \n      const currentProfile = await this.getCurrentUserProfile();\n      if (!currentProfile) {\n        throw new Error('No current user profile');\n      }\n      \n      console.log('üíæ Saving conversation...');\n      \n      const conversationWithId: ConversationHistory = {\n        ...conversation,\n        id: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        userId: currentProfile.id,\n        createdAt: new Date().toISOString(),\n      };\n      \n      if (currentProfile.isAnonymous) {\n        // Save to local storage for anonymous users\n        const localConversations = await this.getLocalConversations();\n        localConversations.push(conversationWithId);\n        await AsyncStorage.setItem('conversations', JSON.stringify(localConversations));\n      } else {\n        // Save to database for authenticated users\n        const { error } = await this.client\n          .from('conversations')\n          .insert(conversationWithId);\n        \n        if (error) {\n          throw error;\n        }\n      }\n      \n      // Update user usage statistics\n      await this.updateUserUsage({\n        totalConversations: (currentProfile.usage.totalConversations || 0) + 1,\n        totalVoiceMessages: (currentProfile.usage.totalVoiceMessages || 0) + conversation.messages.length,\n      });\n      \n      console.log('‚úÖ Conversation saved successfully:', conversationWithId.id);\n      return conversationWithId;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to save conversation:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get conversation history\n   */\n  async getConversationHistory(limit: number = 50, offset: number = 0): Promise<ConversationHistory[]> {\n    try {\n      const currentProfile = await this.getCurrentUserProfile();\n      if (!currentProfile) {\n        return [];\n      }\n      \n      console.log('üìö Getting conversation history...');\n      \n      if (currentProfile.isAnonymous) {\n        // Get from local storage for anonymous users\n        const localConversations = await this.getLocalConversations();\n        return localConversations\n          .slice(offset, offset + limit)\n          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      } else {\n        // Get from database for authenticated users\n        if (!this.client) {\n          throw new Error('Supabase client not initialized');\n        }\n        \n        const { data, error } = await this.client\n          .from('conversations')\n          .select('*')\n          .eq('userId', currentProfile.id)\n          .order('createdAt', { ascending: false })\n          .range(offset, offset + limit - 1);\n        \n        if (error) {\n          throw error;\n        }\n        \n        return data || [];\n      }\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get conversation history:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete conversation\n   */\n  async deleteConversation(conversationId: string): Promise<void> {\n    try {\n      const currentProfile = await this.getCurrentUserProfile();\n      if (!currentProfile) {\n        throw new Error('No current user profile');\n      }\n      \n      console.log('üóëÔ∏è Deleting conversation:', conversationId);\n      \n      if (currentProfile.isAnonymous) {\n        // Delete from local storage for anonymous users\n        const localConversations = await this.getLocalConversations();\n        const filteredConversations = localConversations.filter(conv => conv.id !== conversationId);\n        await AsyncStorage.setItem('conversations', JSON.stringify(filteredConversations));\n      } else {\n        // Delete from database for authenticated users\n        if (!this.client) {\n          throw new Error('Supabase client not initialized');\n        }\n        \n        const { error } = await this.client\n          .from('conversations')\n          .delete()\n          .eq('id', conversationId)\n          .eq('userId', currentProfile.id);\n        \n        if (error) {\n          throw error;\n        }\n      }\n      \n      console.log('‚úÖ Conversation deleted successfully');\n      \n    } catch (error) {\n      console.error('‚ùå Failed to delete conversation:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    return this.currentUser !== null;\n  }\n\n  /**\n   * Get current user\n   */\n  getCurrentUser(): User | null {\n    return this.currentUser;\n  }\n\n  // Private methods\n\n  private async createUserProfile(user: User, additionalData?: Partial<UserProfile>): Promise<UserProfile> {\n    try {\n      if (!this.client) {\n        throw new Error('Supabase client not initialized');\n      }\n      \n      const userProfile: UserProfile = {\n        id: user.id,\n        email: user.email || null,\n        phone: user.phone || null,\n        name: additionalData?.name || 'User',\n        preferredLanguage: additionalData?.preferredLanguage || 'english',\n        isAnonymous: false,\n        createdAt: new Date().toISOString(),\n        lastActiveAt: new Date().toISOString(),\n        settings: {\n          voiceSpeed: 1.0,\n          autoPlay: true,\n          saveHistory: true,\n          offlineMode: true,\n          dataUsageOptimization: true,\n          ...additionalData?.settings,\n        },\n        usage: {\n          totalConversations: 0,\n          totalVoiceMessages: 0,\n          totalMinutesUsed: 0,\n          planType: 'free',\n          remainingCredits: 100, // New user credits\n          ...additionalData?.usage,\n        },\n      };\n      \n      const { error } = await this.client\n        .from('user_profiles')\n        .insert(userProfile);\n      \n      if (error) {\n        throw error;\n      }\n      \n      return userProfile;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to create user profile:', error);\n      throw error;\n    }\n  }\n\n  private async getUserProfile(userId: string): Promise<UserProfile | null> {\n    try {\n      if (!this.client) {\n        throw new Error('Supabase client not initialized');\n      }\n      \n      const { data, error } = await this.client\n        .from('user_profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n      \n      if (error) {\n        if (error.code === 'PGRST116') {\n          // No profile found\n          return null;\n        }\n        throw error;\n      }\n      \n      return data;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get user profile:', error);\n      return null;\n    }\n  }\n\n  private async getLocalConversations(): Promise<ConversationHistory[]> {\n    try {\n      const localConversations = await AsyncStorage.getItem('conversations');\n      return localConversations ? JSON.parse(localConversations) : [];\n    } catch (error) {\n      console.error('‚ùå Failed to get local conversations:', error);\n      return [];\n    }\n  }\n\n  private async updateUserUsage(usage: Partial<UserProfile['usage']>): Promise<void> {\n    try {\n      const currentProfile = await this.getCurrentUserProfile();\n      if (!currentProfile) {\n        return;\n      }\n      \n      const updatedUsage = {\n        ...currentProfile.usage,\n        ...usage,\n      };\n      \n      await this.updateUserProfile({ usage: updatedUsage });\n      \n    } catch (error) {\n      console.error('‚ùå Failed to update user usage:', error);\n    }\n  }\n\n  private onUserSignedIn = (user: User) => {\n    console.log('‚úÖ User signed in:', user.id);\n    // Handle user sign in events\n  };\n\n  private onUserSignedOut = () => {\n    console.log('üëã User signed out');\n    this.currentUser = null;\n    this.currentSession = null;\n  };\n}\n\n// Export singleton instance\nexport const SupabaseService = new SupabaseServiceClass();"
